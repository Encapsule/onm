////
/*
  Object Namespace Manager (onm)

  +-------------+---------------+
  | onm.Address | onm.Namespace |
  +-------------+---------------+
  | onm.Model   | onm.Store     |
  +-------------+---------------+

  Copyright (C) 2015 Encapsule Project (http://encapsule.org)

  License: MIT (https://github.com/Encapsule/onm/blob/master/LICENSE)

  Source: https://github.com/Encapsule/onm

  Issues: https://github.com/Encapsule/onm/issues

  Designed and implemented by Christopher D. Russell

  Encapsule Project is funded by helping small web and cloud start-ups
  own their competition with beyond-next-generation alienware like onm.

  Help us help you: hire us to consult on your next project to unlock
  the potential of Encapsule Project's MIT-licensed core JSON data
  modeling, mathematical graph, software routing, compositional micro-
  service cloud infrastructure, and front-end client components for
  Node.js/HTML 5 browsers.

*/

// onm.Model - meta-data that encapsulates schema information about the
// compositional topology, properties, and attributes of a single-rooted,
// possibly recursive, potentially extensible, hierarchy of named JSON
// objects called namespaces.
//
module.exports.Model = require('./lib/onm-model');

// onm.Address - a resource locator generated by onm.Model that represents
// the "location" within some onm.Store of a new or existing namespace resource.
//
module.exports.Address = require('./lib/onm-address');

// onm.Store - addressable, introspectable, change-observable, in-memory namespace bus.
//
module.exports.Store = require('./lib/onm-store');

// onm.Namespace - a resolved namespace resource within an onm.Store instance
// that provides generator functions for creating addresses and namespace instances,
// store data enumeration and CRUD operations, model introspection, and fine-grained
// control over change journal notifications.
// 
module.exports.Namespace = require('./lib/onm-namespace');

// onm.intrinsics - onm-intrinsic data model declaration object exports.
//
module.exports.intrinsics = require('./lib/impl/onm-intrinsic-data-models');

// onm.util (test/utility exports)
//
module.exports.util = require('./lib/impl/onm-util-functions');

